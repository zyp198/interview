JVM

1、JVM系统架构图
    线程共享 GC 堆空间、方法区
    线程私有 Can't GC JAVA栈 本地方法栈 程序计数器

2、类加载器

	2.1 有哪几种类加载器
	    虚拟机自带的加载器
	        1、启动类加载器（bootstrap c+）
	        2、扩展类加载器 (Extension java)
	        3、应用类加载器 （AppClassLoader）或者叫做系统类加载器，加载当前应该用到的ClassPath的所有类。
	    用户自定义加载器
	        1、Java.lang.ClassLoader的子类（Class CustomClassLoader extend ClassLoader），用户可以定制类的加载方式。

	2.2 双亲委派原则
            当一个类收到了一个类加载请求，类加载器首先不会尝试自己去加载这个类，而是把请求委托给自己的父类，每一个层次的类加载器都是如此，因此
            所有的类加载请求应该都会传送到启动类加载器中，只有父类加载器反馈自己无法完成这个请求的时候，子类加载器才会尝试自己去加载。当所有的加载器都无法加载的时候
            就会报ClassNotFoundException
            双亲委派原则的优势：
            保证了在使用不同的类加载器最终都是得到同一个对象。
	2.3 沙箱安全机制

3、native关键字

	3.1 native是一个关键字
        本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++程序，Java 诞生的时候是 C/C++横行的时候，要想立足，必须有调用 C/C++程序，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。
        目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用 Socket通信，也可以使用Web Service等等，不多做介绍。
	3.2 native只有声明没有实现
	3.3 native method stack
	    它的具体方式是做native method stack 中登记native方法，在Execution engine 执行时加载本地方法库。


4、PC寄存器
    4.1 程序计数器
        4.1.1 线程私有，实际上是一个指针（指针，指向方法区中的字节码）
        4.1.2 用来完成分支、循环、跳转、异常处理、线程恢复等操作
        4.1.3 所需要得内存空间非常小，不会发生OOM
        4.1.4 如果是一个Naive方法，那么这个计数器是空的

5、java栈
	5.1 栈管运行，堆管存储。
	5.2 栈也叫栈内存，主要负责java程序的运行，是线程创建的时候创建，他的生命周期是和线程一样的
	5.3 对于栈来说不存在垃圾回收的问题。（原因：线程结束栈内存也就释放）
	5.4 线程私有
	5.5 8种基本类型的变量+对象的引用+实例方法

6、方法区(java7 永久带 ; java8 元空间 mataspace)
    6.1 线程共享区域
    6.2 存储一个类的结构信息，例如运行时常量池，字段和方法数据、构造方法和普通方法的字节码内容
    6.3 方法区是一套规范。它的实现有两种方式，分别是永久代【jdk7】和元空间【jdk8】
    6.4 实例变量存放在堆内存中【可以GC】，和方法区无关
        什么是实例变量？引用变量？实例方法？
7、堆空间

8、VM参数
-Xms8m -Xmx8m -XX:+PrintGCDetails
-Xms start jvm初始化获取内存大小
-Xmx max jvm能获取的最大内存

计算机中的速度
CPU -> 缓存 —> 内存 -> 硬盘

9、JVM执行顺序
静态块 》 构造块 》 构造方法

